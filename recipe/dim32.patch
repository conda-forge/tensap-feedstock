From 9bf7ebd338d7290eb686222a2a1ef8abe0d4d18d Mon Sep 17 00:00:00 2001
From: alicelebrun <alice.lebrun2002@gmail.com>
Date: Sun, 14 Nov 2021 06:30:11 +0100
Subject: [PATCH] Applied Erwan Grelier's patch to allow for tensors of
 dimension>32

---
 tensap/tensor_algebra/tensors/canonical_tensor.py  | 3 +--
 tensap/tensor_algebra/tensors/tree_based_tensor.py | 2 +-
 tensap/tensor_algebra/tools/truncator.py           | 4 ++--
 3 files changed, 4 insertions(+), 5 deletions(-)

diff --git a/tensap/tensor_algebra/tensors/canonical_tensor.py b/tensap/tensor_algebra/tensors/canonical_tensor.py
index a5545cd..7078fe0 100644
--- a/tensap/tensor_algebra/tensors/canonical_tensor.py
+++ b/tensap/tensor_algebra/tensors/canonical_tensor.py
@@ -293,8 +293,7 @@ def dot(self, tensor_2):
             'The second argument must be a tensap.CanonicalTensor.'
         matrices = [np.matmul(np.transpose(x), y) for
                     x, y in zip(self.space, tensor_2.space)]
-        out = tensor_2.core.full().tensor_matrix_product(matrices)
-        return self.core.full().dot(out)
+        return self.core.dot_with_rank_one_metric(tensor_2.core, matrices)
 
     def norm(self, matrix=None):
         '''
diff --git a/tensap/tensor_algebra/tensors/tree_based_tensor.py b/tensap/tensor_algebra/tensors/tree_based_tensor.py
index 5caf8ba..26aa658 100644
--- a/tensap/tensor_algebra/tensors/tree_based_tensor.py
+++ b/tensap/tensor_algebra/tensors/tree_based_tensor.py
@@ -492,7 +492,7 @@ def numpy(self):
             The TreeBasedTensor as a numpy.ndarray.
 
         '''
-        return self.full().data.numpy()
+        return self.full().data
 
     def sub_tensor(self, *indices):
         '''
diff --git a/tensap/tensor_algebra/tools/truncator.py b/tensap/tensor_algebra/tools/truncator.py
index 36186a9..15cf155 100644
--- a/tensap/tensor_algebra/tools/truncator.py
+++ b/tensap/tensor_algebra/tools/truncator.py
@@ -190,8 +190,8 @@ def svd(self, tensor):
 
         if isinstance(tensor, np.ndarray):
             out = self.trunc_svd(tensor)
-        elif hasattr(tensor, 'numpy'):
-            out = self.trunc_svd(tensor.numpy())
+        elif isinstance(tensor, tensap.FullTensor):
+            out = self.trunc_svd(tensor.data)
         elif isinstance(tensor, tensap.TreeBasedTensor):
             out = self.hsvd(tensor)
         elif isinstance(tensor, tensap.CanonicalTensor):
